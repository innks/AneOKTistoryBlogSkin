! function(t) {
    t.fn.DynamicScrollspy = function(i) {
        if (i = void 0 === i ? {} : i, this.isinit = void 0 !== this.isinit && n.isinit, "destroy" == i) return this.isinit = !1, this.empty(), this.off("activate.bs.scrollspy"), t("body").removeAttr("data-spy"), this;
        this.options = t.extend({}, {
            affix: !0,
            tH: 2,
            bH: 4,
            exclude: !1,
            genIDs: !1,
            offset: 100,
            ulClassNames: "hidden-print",
            activeClass: "",
            testing: !1
        }, this.options, i);
        var n = this;

        function e(i) {
            return t("<div></div>").text(i).html()
        }

        function s() {
            for (var i = [], e = n.options.tH; e <= n.options.bH; e++) i.push("H" + e);
            return t(i.join(",")).not(n.options.exclude)
        }

        function r() {
            s().prop("id", function() {
                return "" === t(this).prop("id") ? t(this).prop("tagName") + function() {
                    var t;

                    function i() {
                        t = Math.floor(900 * Math.random()) + 100
                    }
                    for (i(); n.rands.indexOf(t) >= 0;) i();
                    return n.rands.push(t), t
                }() : t(this).prop("id")
            })
        }

        function o() {
            var i = n.tree;
            return t("H" + n.options.tH).not(n.options.exclude).each(function() {
                var n = t(this).html();
                if (n.includes("&")) var s = n.substr(0, n.indexOf("&"));
                else if (n.includes("<")) s = n.substr(0, n.indexOf("<"));
                else s = n;
                s = s.trim(), i[t(this).prop("id")] = {
                    dstext: e(s),
                    jqel: t(this)
                }
            }), n.options.tH + 1 <= n.options.bH && function i(s) {
                for (var r in s)
                    if ("" !== r && "dstext" != r && "jqel" != r) {
                        var o = Number(t("#" + r).prop("tagName").replace("H", ""));
                        if (o >= n.options.bH) return !1;
                        t("#" + r).nextUntil("H" + o).filter("H" + (o + 1)).not(n.options.exclude).each(function() {
                            var i = t(this).html();
                            if (i.includes("&")) var n = i.substr(0, i.indexOf("&"));
                            else if (i.includes("<")) var n = i.substr(0, i.indexOf("<"));
                            else var n = i;
                            n = n.trim(), s[r][t(this).prop("id")] = {
                                dstext: e(n),
                                jqel: t(this)
                            }
                        }), o < n.options.bH && i(s[r])
                    }
            }(i), i
        }

        function a() {
            var i = t('<ul class="nav ' + n.options.ulClassNames + '"></ul>');
            return n.append(i), t.each(n.tree, function(e) {
                var s = '<li id="ink' + e + '" class="nav-item"><a href="#' + e + '" class="nav-link">' + n.tree[e].dstext + "</a></li>";
                i.append(s),
                    function i(n) {
                        if (Object.keys(n).length < 3) return !1;
                        var e = t("#ink" + n.jqel.prop("id"));
                        var s = t("<ul class='nav child'></ul>");
                        e.append(s);
                        for (var r in n)
                            if ("dstext" != r && "jqel" != r) {
                                var o = n[r];
                                s.append('<li id="ink' + r + '" class="nav-item"><a href="#' + r + '" class="nav-link">' + o.dstext + "</a></li>"), i(n[r])
                            }
                    }(n.tree[e])
            }), n
        }
        return this.tree = {}, this.rands = [],
            function() {
                if (!1 === n.isinit) {
                    if (n.options.genIDs ? r() : function() {
                            var i = 0;
                            if (s().each(function() {
                                    if ("" === t(this).prop("id")) i++;
                                    else if (t('[id="' + t(this).prop("id") + '"]').length > 1) throw new Error("DynamicScrollspy: Error! Duplicate id " + t(this).prop("id"))
                                }), i > 0) throw new Error("DynamicScrollspy: Not all headers have ids and genIDs: false.")
                        }(), n.options.testing && s().append(function() {
                            return " (" + t(this).prop("tagName") + ", " + t(this).prop("id") + ")"
                        }), o(), a(), n.options.affix && "function" == typeof n.children("ul").affix) {
                        var i = n.children("ul");
                        n.children("ul").affix({
                            offset: {
                                top: function() {
                                    var e = i.offset().top,
                                        s = parseInt(i.children(0).css("margin-top"), 10),
                                        r = t(n).height();
                                    return this.top = e - r - s
                                },
                                bottom: function() {
                                    return this.bottom = t(n).outerHeight(!0)
                                }
                            }
                        })
                    }
                    t("body").attr("data-spy", "true").scrollspy({
                        target: "#" + n.prop("id"),
                        offset: n.options.offset
                    }), n.isinit = !0
                } else o(), a(), t('[data-spy="scroll"]').each(function() {
                    t(this).scrollspy("refresh")
                });
                return n
            }()
    }
}(jQuery);